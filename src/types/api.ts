/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/create-company": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new company */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Name of the company
                         * @example Acme Corporation
                         */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Company created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Conflict - Company already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all companies */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of companies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        }[];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a company by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the company to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description New name for the company
                         * @example Updated Company Name
                         */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Company updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
                /** @description Bad request - Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Company not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Conflict - Company name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            details?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a company by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the company to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Company deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Company deleted successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Company not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Company not found */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            details?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all buildings */
        get: {
            parameters: {
                query?: {
                    /** @description Filter buildings by company ID */
                    company_id?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of buildings retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BuildingWithCompany"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /** Create a new building */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Name of the building
                         * @example Main Office
                         */
                        name: string;
                        /**
                         * @description Address of the building
                         * @example 123 Business Street
                         */
                        address: string;
                        /**
                         * @description ID of the company that owns the building
                         * @example 1
                         */
                        company_id: number;
                    };
                };
            };
            responses: {
                /** @description Building created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Building"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["CompanyNotFound"];
                /** @description Conflict - Building already exists for this company */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/buildings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a building by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the building to retrieve */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Building retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BuildingWithCompany"];
                    };
                };
                404: components["responses"]["BuildingNotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a building by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the building to update */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description New name for the building
                         * @example Updated Building Name
                         */
                        name: string;
                        /**
                         * @description New address for the building
                         * @example 456 Updated Street
                         */
                        address: string;
                        /**
                         * @description ID of the company that owns the building
                         * @example 1
                         */
                        company_id: number;
                    };
                };
            };
            responses: {
                /** @description Building updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Building"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["BuildingNotFound"];
                /** @description Conflict - Building name already exists for this company */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /** Delete a building by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the building to delete */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Building deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Building deleted successfully */
                            message?: string;
                        };
                    };
                };
                404: components["responses"]["BuildingNotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example Resource not found */
            error?: string;
        };
        Building: {
            id?: number;
            name?: string;
            address?: string;
            company_id?: number;
        };
        BuildingWithCompany: components["schemas"]["Building"] & {
            company_name?: string;
        };
    };
    responses: {
        /** @description Bad request - Invalid input */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Company not found */
        CompanyNotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Building not found */
        BuildingNotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
